function codeStr = codesecgen(blockhandle, configfile, ftype, section, inarg, ret)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This function generate driver code section for target block
% ftype means function type, eg. '_init',  '_step', '_read_%<>', '_write_%<>',
% '_stop' and so on. 
% section -- 'include'|'definition' | 'prototype' | 'call'
%
% When code gen, codesecgen should be called in makehook during "before
% tlc"
% coderead should be called by make_hook file in stage "before_tlc".
% Hyowinner @2016/6/27
% add inarg, ret into funciton to make it generate funciton with argument
% and return value. @2016/6/28
% Add multiple elements parse for regio @2016/7/4
% Add postfuncname replacement function : ftype => ftype + %<datenum>
% @2016/7/6
% Add processing for controls that generate only comment/prepared sentence
% Add pattern for popupmenu. If its codegenstr is empty, then return val
% by regvar(blkhandl, regio) @2016/7/11
% "NoReg" for uiobj.regio means no definition code will be generated by this parameter.
% uiobj.precode and uiobj.postcode for popupmenu are added for code before and after regio = XX;
% Hyowinner @2016/7/12
% Add one pattern : For text without regio, it should not generate code. @2016/7/13
% Add tlc varialble replace for "ret" , "inarg" and "obj(ii).regio". @2016/7/15
% Fix a bug for replace for "inarg" when it is a cell array.  @2016/7/16
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if nargin < 3
    ftype = '';
    section = 'definition';
    inarg = 'void';
    ret = 'void ';                  % ret need a blank after
elseif nargin < 4
    section = 'definition';
    inarg = 'void';
    ret = 'void ';
elseif nargin < 5
    inarg = 'void';
    ret = 'void';
elseif nargin < 6
    ret = 'void ';
end
% if need replace tlc variable then do it before used.
if isa(inarg, 'char')
    inarg = repvar(blockhandle, inarg);
elseif isa(inarg, 'cell')
    for ii = 1:length(inarg)
        inarg{ii} = repvar(blockhandle, inarg{ii});
    end
end
ret = repvar(blockhandle, ret);
% replaced done for no-condition variables.
codeStr = [];
obj = configfile;
periname = get_param_periname(blockhandle);
headerfile = get_param_headerfile(blockhandle);
tabstr = '    ';
if strcmpi(section, 'definition')
    % generate function prototype
    if isa(inarg, 'char')
        codeStr = [codeStr, ret periname ftype '(' inarg ')' char(10)];
    elseif isa(inarg, 'cell')                                       % add proc for multi-inarg @2016/7/5
        codeStr = [codeStr, ret periname ftype '(' inarg{1}];
        for kk = 2:length(inarg)
            codeStr = [codeStr, ', ', inarg{kk}];
        end
        codeStr = [codeStr, ')', char(10)];
    end
    codeStr = [codeStr '{' char(10)];
    
    % generate function body
    for ii = 2:length(obj) - 2
        % print precode
        if isfield(obj(ii), 'precode')&&~isempty(obj(ii).precode)
            codeStr = [codeStr, obj(ii).precode char(10)];
        end
        % precode end
        pv_v = get_param_pv(blockhandle, obj(ii).var);              % get value from block
        if strcmpi(obj(ii).type, 'checkbox')
            if isa(obj(ii).regio, 'char')
                codeStr = [codeStr tabstr obj(ii).regio ' = '  num2str(endis2bool(pv_v)) ';' char(10)];
            elseif isa(obj(ii).regio, 'cell')
                for kk = 1:size(obj(ii).regio,1)                    % roll for each row cont
                    codeStr = [codeStr tabstr cell2mat(obj(ii).regio(kk,:)) ' = '  num2str(endis2bool(pv_v)) ';' char(10)];
                end
            end
        elseif strcmpi(obj(ii).type, 'popupmenu')                   % take index then get the codegenstr
            cgenstr = obj(ii).codegenstr;
            % add empty judge for obj(ii).codegenstr; If empty then return
            % XXX%<XXXX> pattern
            if isempty(cgenstr)
                if isa(obj(ii).regio, 'char')
                    %return RTC_CLOCK_SWITCH;
                    codeStr = [codeStr tabstr 'return ' repvar(blockhandle, obj(ii).regio) ';' char(10)];
                elseif isa(obj(ii).regio, 'cell')
                    for kk = 1:size(obj(ii).regio,1)
                        codeStr = [codeStr tabstr 'return ' repvar(blockhandle, cell2mat(obj(ii).regio(kk,:))) ';' char(10)];
                    end
                end
            else          % codegenstr is not empty
                if isa(obj(ii).regio, 'char')                               % maybe have %<> to be replaced
                    if strcmp(obj(ii).regio, 'NoReg')
                        continue;                       % NoReg means no definition code will be generated by this parameter.
                    end                                                                 % uiobj has a different value with block "g_pv" on "reg" and "peri" sometimes because multiple block use the same uiobj but gcbh in fixed at one during build process.
                    codeStr = [codeStr tabstr repvar(blockhandle, obj(ii).regio) ' = '  num2str(cgenstr{popupstr2index(obj(ii), pv_v)}) ';' char(10)];       % get index curval stored in popupmenu string
                elseif isa(obj(ii).regio, 'cell')
                    for kk = 1:size(obj(ii).regio,1)
                        codeStr = [codeStr tabstr cell2mat(obj(ii).regio(kk,:)) ' = '  num2str(cgenstr{popupstr2index(obj(ii), pv_v)}) ';' char(10)];
                    end
                elseif isempty(obj(ii).regio)       % for controls that generate only comment|prepared sentence  @2016/7/11
                    codeStr = [codeStr tabstr cell2mat(obj(ii).codegenstr) char(10)];
                end
            end
        else                                                                    % for other controls(text eg.)
            if isfield(obj(ii), 'regio')&&~isempty(obj(ii).regio)               % for text without regio, it should not generate code @2016/7/13
                % has or no argement need to be divided here
                if strcmp(ret, 'void ')
                    if strcmp(inarg, 'void')
                        if isa(obj(ii).regio, 'char')
                            % RTC_WTCR_UPDT = 0x52FA;
                            codeStr = [codeStr tabstr obj(ii).regio ' = '  num2str(pv_v) ';' char(10)];
                        elseif isa(obj(ii).regio, 'cell')
                            for kk = 1:size(obj(ii).regio,1)
                                codeStr = [codeStr tabstr cell2mat(obj(ii).regio(kk,:)) ' = '  num2str(pv_v) ';' char(10)];
                            end
                        end
                    else                          % has input argument
                        if isa(obj(ii).regio, 'char')
                            % RTC_WTCR_UPDT = updt;
                            codeStr = [codeStr tabstr obj(ii).regio ' = '  get_var(inarg) ';' char(10)];
                        elseif isa(obj(ii).regio, 'cell')
                            for kk = 1:size(obj(ii).regio,1)
                                if isa(inarg, 'char')
                                    codeStr = [codeStr tabstr cell2mat(obj(ii).regio(kk,:)) ' = '  get_var(inarg) ';' char(10)];
                                elseif isa(inarg, 'cell')       % add proc for multi-inargs
                                    codeStr = [codeStr tabstr repvar(blockhandle, cell2mat(obj(ii).regio(kk,:))) ' = '  get_var(inarg{kk}) ';' char(10)];
                                end
                            end
                        end
                    end
                else
                    if isa(obj(ii).regio, 'char')
                        %return RTC_CLOCK_SWITCH;
                        codeStr = [codeStr tabstr 'return ' obj(ii).regio ';' char(10)];
                    elseif isa(obj(ii).regio, 'cell')
                        for kk = 1:size(obj(ii).regio,1)
                            codeStr = [codeStr tabstr 'return ' cell2mat(obj(ii).regio(kk,:)) ';' char(10)];
                        end
                    end
                end
            end
        end
    end
    % print postcode
    if isfield(obj(ii), 'postcode')
        codeStr = [codeStr, obj(ii).postcode char(10)];
    end
    % postcode end
    codeStr = [codeStr '}' char(10)];
elseif strcmpi(section, 'prototype')
    if isa(inarg, 'char')
        codeStr = [codeStr, ret periname ftype '(' inarg ');' char(10)];
    elseif isa(inarg, 'cell')
        % add processing for multi input argument @2016/7/5
        codeStr = [codeStr, ret periname ftype '(' inarg{1} ];
        for kk = 2:length(inarg)
            codeStr = [codeStr, ', ' inarg{kk}];
        end
        codeStr = [codeStr, ');' char(10)];
    end
elseif strcmpi(section, 'call')
    % has or no inarg/return value need to be divided to four groups here
    if strcmp(ret, 'void ')
        if strcmp(inarg, 'void')
            % func();
            codeStr = [codeStr, periname ftype '();' char(10)];
        else
            % func(     %<x>);
            codeStr = [codeStr, periname ftype '('];
        end
    else
        if strcmp(inarg, 'void')
            % varname =      func();
            codeStr = [codeStr, periname ftype '();' char(10)];
        else
            % varname =       func(       %<x>);
            codeStr = [codeStr, periname ftype '('];
        end
    end
    
elseif strcmpi(section, 'include')
    codeStr = [codeStr '#include "s6j3200io.h"' char(10)];              % 2016/6/28 each peri.h need to be included in each peri.h
else
    error(['Error: Not support section' section ' now!']);
end
% write this code section to temp file in the targetfolder. 2016/6/30
targetfolder = get_tarfolder();

cur_filename = [periname ftype '_' section '_temp.dat'];
fid = fopen(fullfile(targetfolder, cur_filename), 'w');
fprintf(fid, '%s\n', codeStr);
fclose(fid);
end


function boolval = endis2bool(endis)
% This function transform enable('on')/disable('off') to 1/0
if strcmpi(endis, 'on')
    boolval = 1;
else
    boolval = 0;
end
end

function index = popupstr2index(obj, pv_val)
% This function transform string value in popup to register value according
% to its position in memebers.
str = pv_val;
members = obj.members;
if isa(members, 'cell')
    index = find(ismember(members, str));
elseif isa(members, 'numeric')
    index = find(ismember(members, str2double(str)));
end
end

function varstr = get_var(inarg)
% This function get variable name from input argument string.
% Hyowinner @2016/6/30
splitstr = regexp(inarg, '\s', 'split');
varstr = splitstr{2};
end

function dtstr = get_datatype(inarg)
% This function get variable name from input argument string.
% Hyowinner @2016/6/30
splitstr = regexp(inarg, '\s', 'split');
dtstr = splitstr{1};
end

